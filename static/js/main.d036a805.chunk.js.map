{"version":3,"sources":["gameCards.js","components/Scoreboard.js","App.js","helpers.js","index.js"],"names":["Scoreboard","props","className","currentScore","highScore","gameCards","i","name","id","App","useState","numberOfCards","setHighScore","setCurrentScore","shownCards","setShownCards","selectedIds","setSelectedIds","gameover","setGameover","fetchRandomCards","cards","numCards","randomCards","array","t","arrayCpy","m","length","Math","floor","random","shuffle","slice","useEffect","cardSelectHandler","e","selectedId","target","includes","content","map","card","onClick","style","backgroundColor","toString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kKACA,I,iECkBeA,G,MAjBI,SAACC,GAclB,OAZE,sBAAKC,UAAW,kBAAhB,UACE,gCACE,8CACA,4BAAID,EAAME,kBAEZ,gCACE,2CACA,4BAAIF,EAAMG,oBDXdC,EAAY,GACPC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAS,sBAAOA,GAAP,CAAkB,CAAEE,KAAMD,EAAGE,GAAIF,KAG7BD,QEqEAI,EApEH,WAAO,IAAD,EAC0BC,mBAAS,GADnC,mBACTC,EADS,aAEkBD,mBAAS,IAF3B,mBAETN,EAFS,KAEEQ,EAFF,OAGwBF,mBAAS,GAHjC,mBAGTP,EAHS,KAGKU,EAHL,OAIoBH,mBAAS,IAJ7B,mBAITI,EAJS,KAIGC,EAJH,OAKsBL,mBAAS,IAL/B,mBAKTM,EALS,KAKIC,EALJ,OAMgBP,oBAAS,GANzB,mBAMTQ,EANS,KAMCC,EAND,KAQVC,EAAmB,SAACC,EAAOC,GAC/B,IAAMC,ECdM,SAACC,GAMf,IALA,IAEIC,EACAnB,EAHEoB,EAAQ,YAAOF,GACjBG,EAAID,EAASE,OAIVD,GACLrB,EAAIuB,KAAKC,MAAMD,KAAKE,SAAWJ,KAE/BF,EAAIC,EAASC,GACbD,EAASC,GAAKD,EAASpB,GACvBoB,EAASpB,GAAKmB,EAEhB,OAAOC,EDCeM,CAAQX,GAAOY,MAAM,EAAGX,GAC5CP,EAAcQ,IAGhBW,qBAAU,WACRd,EAAiBf,EAAWM,KAC3B,CAACK,EAAaL,IAEjB,IAAMwB,EAAoB,SAACC,GACzB,IAAMC,EAAaD,EAAEE,OAAO9B,GACxBQ,EAAYuB,SAASF,GACvBlB,GAAY,IAEZF,EAAe,GAAD,mBAAKD,GAAL,CAAkBqB,KAChCxB,EAAgBV,EAAe,KAInC+B,qBAAU,WACJ/B,EAAeC,GAAWQ,EAAaT,KAC1C,CAACA,EAAcC,IAElB,IAMIoC,EACF,sBAAKtC,UAAW,aAAhB,UACE,6CACA,cAAC,EAAD,CAAYC,aAAcA,EAAcC,UAAWA,IACnD,8BACGU,EAAW2B,KAAI,SAACC,GAAD,OACd,wBACEC,QAASR,EACT3B,GAAIkC,EAAKlC,GAEToC,MAAO,CAAEC,gBAAgB,IAAD,OCnCpBhB,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBe,SAAS,MD+BpD,SAMGJ,EAAKnC,MAHDmC,EAAKlC,YAmBpB,OATIU,IACFsB,EACE,sBAAKtC,UAAW,MAAhB,UACE,2CACA,wBAAQyC,QA7BO,WACnB9B,EAAgB,GAChBI,EAAe,CAAC,IAChBE,GAAY,IA0BR,yBAKCqB,GElETO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d036a805.chunk.js","sourcesContent":["let gameCards = [];\nfor (let i = 0; i < 10; i++) {\n  gameCards = [...gameCards, { name: i, id: i }];\n}\n\nexport default gameCards;\n","import React from \"react\";\n\nconst Scoreboard = (props) => {\n  let content = (\n    <div className={\"row score-board\"}>\n      <div>\n        <p>Current Score</p>\n        <p>{props.currentScore}</p>\n      </div>\n      <div>\n        <p>High Score</p>\n        <p>{props.highScore}</p>\n      </div>\n    </div>\n  );\n\n  return content;\n};\n\nexport default Scoreboard;\n","import React, { useState, useEffect } from \"react\";\nimport \"./styles/App.css\";\nimport Scoreboard from \"./components/Scoreboard\";\nimport { shuffle, randomColor } from \"./helpers\";\nimport gameCards from \"./gameCards\";\n\nconst App = () => {\n  const [numberOfCards, setNumberOfCards] = useState(3);\n  const [highScore, setHighScore] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [shownCards, setShownCards] = useState([]);\n  const [selectedIds, setSelectedIds] = useState([]);\n  const [gameover, setGameover] = useState(false);\n\n  const fetchRandomCards = (cards, numCards) => {\n    const randomCards = shuffle(cards).slice(0, numCards);\n    setShownCards(randomCards);\n  };\n\n  useEffect(() => {\n    fetchRandomCards(gameCards, numberOfCards);\n  }, [selectedIds, numberOfCards]);\n\n  const cardSelectHandler = (e) => {\n    const selectedId = e.target.id;\n    if (selectedIds.includes(selectedId)) {\n      setGameover(true);\n    } else {\n      setSelectedIds([...selectedIds, selectedId]);\n      setCurrentScore(currentScore + 1);\n    }\n  };\n\n  useEffect(() => {\n    if (currentScore > highScore) setHighScore(currentScore);\n  }, [currentScore, highScore]);\n\n  const resetHandler = () => {\n    setCurrentScore(0);\n    setSelectedIds([0]);\n    setGameover(false);\n  };\n\n  let content = (\n    <div className={\"column App\"}>\n      <h1>Memory Dawg</h1>\n      <Scoreboard currentScore={currentScore} highScore={highScore} />\n      <div>\n        {shownCards.map((card) => (\n          <button\n            onClick={cardSelectHandler}\n            id={card.id}\n            key={card.id}\n            style={{ backgroundColor: `#${randomColor()}` }}\n          >\n            {card.name}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n\n  if (gameover) {\n    content = (\n      <div className={\"App\"}>\n        <h1>Game Over</h1>\n        <button onClick={resetHandler}>restart</button>\n      </div>\n    );\n  }\n\n  return content;\n};\n\nexport default App;\n","// Fisher-Yates Shuffle, https://bost.ocks.org/mike/shuffle/\nconst shuffle = (array) => {\n  const arrayCpy = [...array];\n  let m = arrayCpy.length;\n  let t;\n  let i;\n\n  while (m) {\n    i = Math.floor(Math.random() * m--);\n\n    t = arrayCpy[m];\n    arrayCpy[m] = arrayCpy[i];\n    arrayCpy[i] = t;\n  }\n  return arrayCpy;\n};\n\nconst randomColor = () => {\n  const color = Math.floor(Math.random() * 16777215).toString(16);\n  return color;\n};\n\nexport { shuffle, randomColor };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}